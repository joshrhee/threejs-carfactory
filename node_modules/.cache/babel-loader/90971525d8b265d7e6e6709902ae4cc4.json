{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/sangjunerhee/Downloads/Threejs-CarFactory/src/components/Box.jsx\",\n    _s = $RefreshSig$();\n\nimport { useRef } from 'react';\nimport { useLoader, useFrame } from 'react-three-fiber';\nimport * as THREE from 'three';\nimport { useBox } from 'use-cannon';\n\nconst Box = props => {\n  _s();\n\n  const [ref, api] = useBox(() => ({\n    mass: 1,\n    ...props\n  }));\n  const texture = useLoader(THREE.TextureLoader, process.env.PUBLIC_URL + '/wood.jpg');\n\n  const handlePointerDown = e => {\n    e.object.active = true;\n\n    if (window.activeMesh) {\n      scaleDown(window.activeMesh);\n      window.activeMesh.active = false;\n    }\n\n    window.activeMesh = e.object;\n  };\n\n  const handlePointerEnter = e => {\n    e.object.scale.x = 1.5;\n    e.object.scale.y = 1.5;\n    e.object.scale.z = 1.5;\n  };\n\n  const handlePointerLeave = e => {\n    if (!e.object.active) {\n      scaleDown(e.object);\n    }\n  };\n\n  const scaleDown = object => {\n    object.scale.x = 1;\n    object.scale.y = 1;\n    object.scale.z = 1;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"mesh\", {\n    ref: ref,\n    api: api,\n    ...props,\n    castShadow: true,\n    onPointerDown: handlePointerDown,\n    onPointerEnter: handlePointerEnter,\n    onPointerLeave: handlePointerLeave,\n    children: [/*#__PURE__*/_jsxDEV(\"boxBufferGeometry\", {\n      args: [1, 1, 1]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"meshPhysicalMaterial\", {\n      map: texture\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Box, \"9MvbJqq+rXO8Ri4UnLxVWM+gvbc=\", false, function () {\n  return [useBox, useLoader];\n});\n\n_c = Box;\nexport default Box;\n\nvar _c;\n\n$RefreshReg$(_c, \"Box\");","map":{"version":3,"sources":["/Users/sangjunerhee/Downloads/Threejs-CarFactory/src/components/Box.jsx"],"names":["useRef","useLoader","useFrame","THREE","useBox","Box","props","ref","api","mass","texture","TextureLoader","process","env","PUBLIC_URL","handlePointerDown","e","object","active","window","activeMesh","scaleDown","handlePointerEnter","scale","x","y","z","handlePointerLeave"],"mappings":";;;;;AAAA,SAASA,MAAT,QAAuB,OAAvB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,mBAApC;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,MAAT,QAAuB,YAAvB;;AAEA,MAAMC,GAAG,GAAGC,KAAK,IAAI;AAAA;;AACjB,QAAM,CAACC,GAAD,EAAMC,GAAN,IAAaJ,MAAM,CAAC,OAAO;AAACK,IAAAA,IAAI,EAAE,CAAP;AAAU,OAAGH;AAAb,GAAP,CAAD,CAAzB;AAEA,QAAMI,OAAO,GAAGT,SAAS,CACrBE,KAAK,CAACQ,aADe,EAErBC,OAAO,CAACC,GAAR,CAAYC,UAAZ,GAAyB,WAFJ,CAAzB;;AAKA,QAAMC,iBAAiB,GAAGC,CAAC,IAAI;AAC3BA,IAAAA,CAAC,CAACC,MAAF,CAASC,MAAT,GAAkB,IAAlB;;AACA,QAAIC,MAAM,CAACC,UAAX,EAAuB;AACnBC,MAAAA,SAAS,CAACF,MAAM,CAACC,UAAR,CAAT;AACAD,MAAAA,MAAM,CAACC,UAAP,CAAkBF,MAAlB,GAA2B,KAA3B;AACH;;AACDC,IAAAA,MAAM,CAACC,UAAP,GAAoBJ,CAAC,CAACC,MAAtB;AACH,GAPD;;AASA,QAAMK,kBAAkB,GAAGN,CAAC,IAAI;AAC5BA,IAAAA,CAAC,CAACC,MAAF,CAASM,KAAT,CAAeC,CAAf,GAAmB,GAAnB;AACAR,IAAAA,CAAC,CAACC,MAAF,CAASM,KAAT,CAAeE,CAAf,GAAmB,GAAnB;AACAT,IAAAA,CAAC,CAACC,MAAF,CAASM,KAAT,CAAeG,CAAf,GAAmB,GAAnB;AACH,GAJD;;AAMA,QAAMC,kBAAkB,GAAGX,CAAC,IAAI;AAC5B,QAAI,CAACA,CAAC,CAACC,MAAF,CAASC,MAAd,EAAsB;AAClBG,MAAAA,SAAS,CAACL,CAAC,CAACC,MAAH,CAAT;AACH;AACJ,GAJD;;AAMA,QAAMI,SAAS,GAAGJ,MAAM,IAAI;AACxBA,IAAAA,MAAM,CAACM,KAAP,CAAaC,CAAb,GAAiB,CAAjB;AACAP,IAAAA,MAAM,CAACM,KAAP,CAAaE,CAAb,GAAiB,CAAjB;AACAR,IAAAA,MAAM,CAACM,KAAP,CAAaG,CAAb,GAAiB,CAAjB;AACH,GAJD;;AAMA,sBACI;AACI,IAAA,GAAG,EAAEnB,GADT;AAEI,IAAA,GAAG,EAAEC,GAFT;AAAA,OAGQF,KAHR;AAII,IAAA,UAAU,MAJd;AAKI,IAAA,aAAa,EAAES,iBALnB;AAMI,IAAA,cAAc,EAAEO,kBANpB;AAOI,IAAA,cAAc,EAAEK,kBAPpB;AAAA,4BASI;AAAmB,MAAA,IAAI,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP;AAAzB;AAAA;AAAA;AAAA;AAAA,YATJ,eAUI;AACI,MAAA,GAAG,EAAEjB;AADT;AAAA;AAAA;AAAA;AAAA,YAVJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAgBH,CAnDD;;GAAML,G;UACiBD,M,EAEHH,S;;;KAHdI,G;AAqDN,eAAeA,GAAf","sourcesContent":["import { useRef } from 'react';\nimport { useLoader, useFrame } from 'react-three-fiber';\nimport * as THREE from 'three';\nimport { useBox } from 'use-cannon';\n\nconst Box = props => {\n    const [ref, api] = useBox(() => ({mass: 1, ...props}))\n\n    const texture = useLoader(\n        THREE.TextureLoader,\n        process.env.PUBLIC_URL + '/wood.jpg'\n    );\n\n    const handlePointerDown = e => {\n        e.object.active = true;\n        if (window.activeMesh) {\n            scaleDown(window.activeMesh)\n            window.activeMesh.active = false;\n        }\n        window.activeMesh = e.object\n    }\n\n    const handlePointerEnter = e => {\n        e.object.scale.x = 1.5\n        e.object.scale.y = 1.5\n        e.object.scale.z = 1.5\n    }\n\n    const handlePointerLeave = e => {\n        if (!e.object.active) {\n            scaleDown(e.object)\n        }\n    }\n\n    const scaleDown = object => {\n        object.scale.x = 1\n        object.scale.y = 1\n        object.scale.z = 1\n    }\n\n    return (\n        <mesh\n            ref={ref}\n            api={api}\n            {...props}\n            castShadow\n            onPointerDown={handlePointerDown}\n            onPointerEnter={handlePointerEnter}\n            onPointerLeave={handlePointerLeave}\n        >\n            <boxBufferGeometry args={[1, 1, 1]} />\n            <meshPhysicalMaterial\n                map={texture}\n            />\n        </mesh>\n    )\n}\n\nexport default Box;\n"]},"metadata":{},"sourceType":"module"}