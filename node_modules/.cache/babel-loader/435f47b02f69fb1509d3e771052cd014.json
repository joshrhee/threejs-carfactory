{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/sangjunerhee/Desktop/Git/Threejs-CarFactory/src/components/Cars.jsx\",\n    _s = $RefreshSig$();\n\nimport { Suspense } from 'react'; // import { SantaCar } from './SantaCar'\n\nimport BoundingBox from './BoundingBox';\nimport Model from './Model';\nimport Draggable from './Draggable';\nimport { useLoader, useFrame } from 'react-three-fiber';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport * as THREE from 'three';\n\nconst Cars = ({}) => {\n  return /*#__PURE__*/_jsxDEV(Suspense, {\n    fallback: null,\n    children: [/*#__PURE__*/_jsxDEV(Draggable, {\n      transformGroup: true,\n      children: /*#__PURE__*/_jsxDEV(BoundingBox, {\n        position: [4, 4, 0],\n        dims: [3, 2, 6],\n        offset: [0, -0.4, 0.8],\n        children: /*#__PURE__*/_jsxDEV(SantaCar, {\n          scale: new Array(3).fill(0.01)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Draggable, {\n      transformGroup: true,\n      children: /*#__PURE__*/_jsxDEV(BoundingBox, {\n        position: [-4, 4, 0],\n        dims: [3, 2, 7],\n        offset: [0, -0.8, 0.2],\n        children: /*#__PURE__*/_jsxDEV(Model, {\n          path: \"/tesla_model_s/scene.gltf\",\n          scale: new Array(3).fill(0.013)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Draggable, {\n      transformGroup: true,\n      children: /*#__PURE__*/_jsxDEV(BoundingBox, {\n        position: [-8, 0, 0],\n        dims: [3, 2, 7],\n        offset: [-4, -0.9, -0.4],\n        children: /*#__PURE__*/_jsxDEV(Model, {\n          path: \"/tesla_roadster_2020_interior/scene.gltf\",\n          scale: new Array(3).fill(2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Cars;\nexport default Cars;\n\nconst SantaCar = props => {\n  _s();\n\n  const model = creatingWholeCar();\n  let mixer;\n\n  if (model.animations.length > 0) {\n    mixer = new THREE.AnimationMixer(model.scene);\n    model.animations.forEach(clip => {\n      const action = mixer.clipAction(clip);\n      action.play();\n    });\n  }\n\n  console.log(\"model\", model);\n  useFrame((scene, delta) => {\n    var _mixer;\n\n    (_mixer = mixer) === null || _mixer === void 0 ? void 0 : _mixer.update(delta);\n  });\n  model.scene.traverse(child => {\n    if (child.isMesh) {\n      child.castShadow = true;\n      child.receiveShadow = true;\n      child.material.side = THREE.FrontSide;\n    }\n  }); // return (\n  //     <primitive\n  //         object={model.scene}\n  //         scale={props.scale}\n  //         position={props.position}\n  //     />\n  // )\n};\n\n_s(SantaCar, \"xC67171NPRcCAzsbrenetil66NI=\", false, function () {\n  return [useFrame];\n});\n\n_c2 = SantaCar;\n\nfunction creatingWholeCar() {\n  // mainBox\n  // part 1\n  const mainBox = createMainBox(0xf3f709); //60 15 30\n  // Front wheel part\n  // part 2\n\n  const frontWheelAttacher = createWheelAttacher(0x333333); // 12 12 33\n\n  frontWheelAttacher.translateX(18);\n  frontWheelAttacher.translateY(-3); // part 3\n\n  const frontLeftwheel = createWheel(0xFFC0CB);\n  frontWheelAttacher.add(frontLeftwheel);\n  frontLeftwheel.translateY(-3);\n  frontLeftwheel.translateZ(-17.5); // part 4\n\n  const frontRightwheel = createWheel(0xFFC0CB);\n  frontWheelAttacher.add(frontRightwheel);\n  frontRightwheel.translateY(-3);\n  frontRightwheel.translateZ(17.5); // Back wheel part\n  // part 5\n\n  const backWheelAttacher = createWheelAttacher(0x333333);\n  backWheelAttacher.translateX(-18);\n  backWheelAttacher.translateY(-3); // part 6\n\n  const backLeftwheel = createWheel(0xFFC0CB);\n  backWheelAttacher.add(backLeftwheel);\n  backLeftwheel.translateY(-3);\n  backLeftwheel.translateZ(-17.5); // part 7\n\n  const backRightwheel = createWheel(0xFFC0CB);\n  backWheelAttacher.add(backRightwheel);\n  backRightwheel.translateY(-3);\n  backRightwheel.translateZ(17.5);\n  const allWheelAttachers = new THREE.Object3D();\n  allWheelAttachers.add(frontWheelAttacher, backWheelAttacher);\n  mainBox.add(allWheelAttachers); // part 8\n\n  const carFrontTexture = getCarFrontBackTexture(mainBox); // part 9\n\n  const carBackTexture = getCarFrontBackTexture(mainBox); // part 10\n\n  const carLeftSideTexture = getCarSideTexture(mainBox); // part 11\n\n  const carRightSideTexture = getCarSideTexture(mainBox); // Putting all textures into cabin\n\n  const cabin = createCabin(carFrontTexture, carBackTexture, carLeftSideTexture, carRightSideTexture);\n  mainBox.add(cabin);\n  cabin.translateX(-6);\n  cabin.translateY(13.5); // Eye part\n  // part 12\n\n  const leftHeadEye = headEye(0x000000);\n  leftHeadEye.translateX(30);\n  leftHeadEye.translateY(3);\n  leftHeadEye.translateZ(-10);\n  leftHeadEye.rotateY(degreeToRadian(90)); // part 13\n\n  const rightHeadEye = headEye(0x000000);\n  rightHeadEye.translateX(30);\n  rightHeadEye.translateY(3);\n  rightHeadEye.translateZ(10);\n  rightHeadEye.rotateY(degreeToRadian(90));\n  const eyes = new THREE.Object3D();\n  eyes.add(leftHeadEye, rightHeadEye);\n  mainBox.add(eyes); // Nose\n  // part 14\n\n  const nose = createNose(0xf70707);\n  nose.translateX(30);\n  nose.rotateZ(degreeToRadian(-90));\n  mainBox.add(nose); // Back exhaust part\n  // part 15\n\n  const leftExhaust = createExhaust(0x968b8b);\n  leftExhaust.translateX(-32);\n  leftExhaust.translateY(-5);\n  leftExhaust.translateZ(-3);\n  leftExhaust.rotateZ(degreeToRadian(90)); // part 16\n\n  const rightExhaust = createExhaust(0x968b8b);\n  rightExhaust.translateX(-32);\n  rightExhaust.translateY(-5);\n  rightExhaust.translateZ(3);\n  rightExhaust.rotateZ(degreeToRadian(90)); // Putting all exhaust into exhaust group\n\n  const exhausts = new THREE.Object3D();\n  exhausts.add(leftExhaust, rightExhaust);\n  mainBox.add(exhausts);\n  return mainBox;\n}\n\nfunction createExhaust(color) {\n  const geometry = new THREE.CylinderGeometry(1.3, 1.3, 4, 32);\n  const material = new THREE.MeshBasicMaterial({\n    color: color\n  });\n  const cylinder = new THREE.Mesh(geometry, material);\n  return cylinder;\n}\n\nfunction createNose(color) {\n  const geometry = new THREE.ConeGeometry(5, 10, 32);\n  const material = new THREE.MeshBasicMaterial({\n    color: color\n  });\n  const cone = new THREE.Mesh(geometry, material);\n  return cone;\n}\n\nfunction headEye(color) {\n  var geometry = new THREE.RingGeometry(1, 3.5, 32);\n  var material = new THREE.MeshPhongMaterial({\n    color: 0x000000\n  });\n  const blackEye = new THREE.Mesh(geometry, material);\n  geometry = new THREE.RingGeometry(0, 1, 32);\n  material = new THREE.MeshPhongMaterial({\n    color: 0xffffff\n  });\n  const whiteEye = new THREE.Mesh(geometry, material);\n  blackEye.add(whiteEye);\n  return blackEye;\n}\n\nfunction getCarSideTexture(mainBox) {\n  const canvas = document.createElement(\"canvas\");\n  canvas.width = 128;\n  canvas.height = 32;\n  const context = canvas.getContext(\"2d\");\n\n  if (context != null) {\n    context.fillStyle = \"#ffffff\";\n    context.fillRect(mainBox.position.x, mainBox.position.y, 128, 32);\n    context.fillStyle = \"#666666\";\n    context.fillRect(mainBox.position.x + 10, mainBox.position.y + 5, 38, 24);\n    context.fillRect(mainBox.position.x + 58, mainBox.position.y + 5, 60, 24);\n  }\n\n  return new THREE.CanvasTexture(canvas);\n}\n\nfunction getCarFrontBackTexture(mainBox) {\n  const canvas = document.createElement(\"canvas\");\n  canvas.width = 64;\n  canvas.height = 32;\n  const context = canvas.getContext(\"2d\");\n\n  if (context != null) {\n    context.fillStyle = \"#ffffff\";\n    context.fillRect(mainBox.position.x, mainBox.position.y, 64, 32);\n    context.fillStyle = \"#666666\";\n    context.fillRect(mainBox.position.x + 8, mainBox.position.y + 5, 48, 24);\n  }\n\n  return new THREE.CanvasTexture(canvas);\n}\n\nfunction createCabin(carFrontTexture, carBackTexture, carRightSideTexture, carLeftSideTexture) {\n  const cabin = new THREE.Mesh(new THREE.BoxBufferGeometry(33, 12, 24), [new THREE.MeshLambertMaterial({\n    map: carFrontTexture\n  }), new THREE.MeshLambertMaterial({\n    map: carBackTexture\n  }), new THREE.MeshLambertMaterial({\n    color: 0xffffff\n  }), // top\n  new THREE.MeshLambertMaterial({\n    color: 0xffffff\n  }), // bottom\n  new THREE.MeshLambertMaterial({\n    map: carRightSideTexture\n  }), new THREE.MeshLambertMaterial({\n    map: carLeftSideTexture\n  })]);\n  return cabin;\n}\n\nfunction createMainBox(color) {\n  const main = new THREE.Mesh(new THREE.BoxBufferGeometry(60, 15, 30), new THREE.MeshPhongMaterial({\n    color: color,\n    flatShading: true\n  }));\n  return main;\n}\n\nfunction createWheel(color) {\n  // const geometry: THREE.CircleGeometry = new THREE.CircleGeometry(2, 32);\n  const geometry = new THREE.TorusGeometry(5, 3, 20, 50);\n  const material = new THREE.MeshPhongMaterial({\n    color: 0xFFC0CB\n  });\n  const wheel = new THREE.Mesh(geometry, material);\n  return wheel;\n}\n\nfunction createWheelAttacher(color) {\n  const geometry = new THREE.BoxBufferGeometry(12, 12, 33);\n  const material = new THREE.MeshPhongMaterial({\n    color: color\n  });\n  const wheelAttacher = new THREE.Mesh(geometry, material);\n  return wheelAttacher;\n}\n\nfunction degreeToRadian(degree) {\n  return degree * Math.PI / 180;\n}\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Cars\");\n$RefreshReg$(_c2, \"SantaCar\");","map":{"version":3,"sources":["/Users/sangjunerhee/Desktop/Git/Threejs-CarFactory/src/components/Cars.jsx"],"names":["Suspense","BoundingBox","Model","Draggable","useLoader","useFrame","GLTFLoader","THREE","Cars","Array","fill","SantaCar","props","model","creatingWholeCar","mixer","animations","length","AnimationMixer","scene","forEach","clip","action","clipAction","play","console","log","delta","update","traverse","child","isMesh","castShadow","receiveShadow","material","side","FrontSide","mainBox","createMainBox","frontWheelAttacher","createWheelAttacher","translateX","translateY","frontLeftwheel","createWheel","add","translateZ","frontRightwheel","backWheelAttacher","backLeftwheel","backRightwheel","allWheelAttachers","Object3D","carFrontTexture","getCarFrontBackTexture","carBackTexture","carLeftSideTexture","getCarSideTexture","carRightSideTexture","cabin","createCabin","leftHeadEye","headEye","rotateY","degreeToRadian","rightHeadEye","eyes","nose","createNose","rotateZ","leftExhaust","createExhaust","rightExhaust","exhausts","color","geometry","CylinderGeometry","MeshBasicMaterial","cylinder","Mesh","ConeGeometry","cone","RingGeometry","MeshPhongMaterial","blackEye","whiteEye","canvas","document","createElement","width","height","context","getContext","fillStyle","fillRect","position","x","y","CanvasTexture","BoxBufferGeometry","MeshLambertMaterial","map","main","flatShading","TorusGeometry","wheel","wheelAttacher","degree","Math","PI"],"mappings":"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","sourcesContent":["import { Suspense } from 'react'\n// import { SantaCar } from './SantaCar'\nimport BoundingBox from './BoundingBox'\nimport Model from './Model'\nimport Draggable from './Draggable'\n\nimport { useLoader, useFrame } from 'react-three-fiber';\nimport {\n    GLTFLoader\n} from 'three/examples/jsm/loaders/GLTFLoader';\nimport * as THREE from 'three'\n\nconst Cars = ({ }) => {\n    return (\n        <Suspense fallback={null}>\n            <Draggable transformGroup>\n                <BoundingBox\n                    position={[4, 4, 0]}\n                    dims={[3, 2, 6]}\n                    offset={[0, -0.4, 0.8]}\n                >\n                    {/* <Model\n                        path='/tesla_model_3/scene.gltf'\n                        scale={new Array(3).fill(0.01)}\n                    /> */}\n                    <SantaCar \n                        scale={new Array(3).fill(0.01)}\n                    />\n                </BoundingBox>\n            </Draggable>\n            <Draggable transformGroup>\n                <BoundingBox\n                    position={[-4, 4, 0]}\n                    dims={[3, 2, 7]}\n                    offset={[0, -0.8, 0.2]}\n                >\n                    <Model\n                        path='/tesla_model_s/scene.gltf'\n                        scale={new Array(3).fill(0.013)}\n                    />\n                </BoundingBox>\n            </Draggable>\n            <Draggable transformGroup>\n                <BoundingBox\n                    position={[-8, 0, 0]}\n                    dims={[3, 2, 7]}\n                    offset={[-4, -0.9, -0.4]}\n                >\n                    <Model\n                        path='/tesla_roadster_2020_interior/scene.gltf'\n                        scale={new Array(3).fill(2)}\n                    />\n                </BoundingBox>\n            </Draggable>\n\n            {/*<Draggable transformGroup >*/}\n            {/*    <Model*/}\n            {/*        path='/old_gramophone/scene.gltf'*/}\n            {/*        scale={new THREE.Vector3(.05, .05, .05)}*/}\n            {/*        position={[0, 0, 3]}*/}\n            {/*    />*/}\n            {/*</Draggable>*/}\n            {/*<Draggable transformGroup>*/}\n            {/*    <BoundingBox*/}\n            {/*        dims={[3, 2, 6]}*/}\n            {/*    >*/}\n            {/*        <Model*/}\n            {/*            path='/spectral_rubix/scene.gltf'*/}\n            {/*            scale={new THREE.Vector3(.3, .3, .3)}*/}\n            {/*            position={[0, 1, -5]}*/}\n            {/*        />*/}\n            {/*    </BoundingBox>*/}\n            {/*</Draggable>*/}\n        </Suspense>\n    )\n}\n\nexport default Cars\n\n\nconst SantaCar = props => {\n    const model = creatingWholeCar();\n\n    let mixer\n    if (model.animations.length > 0) {\n        mixer = new THREE.AnimationMixer(model.scene)\n        model.animations.forEach(clip => {\n            const action = mixer.clipAction(clip)\n            action.play()\n        })\n    }\n\n    console.log(\"model\", model)\n\n    useFrame((scene,delta) => {\n        mixer?.update(delta)\n    })\n\n    model.scene.traverse(child => {\n        if (child.isMesh) {\n            child.castShadow = true\n            child.receiveShadow = true\n            child.material.side = THREE.FrontSide\n        }\n    })\n\n    // return (\n    //     <primitive\n    //         object={model.scene}\n    //         scale={props.scale}\n    //         position={props.position}\n    //     />\n    // )\n}\n\nfunction creatingWholeCar() {\n    // mainBox\n    // part 1\n    const mainBox = createMainBox(0xf3f709) //60 15 30\n\n\n    // Front wheel part\n    // part 2\n    const frontWheelAttacher = createWheelAttacher(0x333333); // 12 12 33\n    frontWheelAttacher.translateX(18);\n    frontWheelAttacher.translateY(-3)\n    \n    // part 3\n    const frontLeftwheel = createWheel(0xFFC0CB);\n    frontWheelAttacher.add(frontLeftwheel)\n    frontLeftwheel.translateY(-3);\n    frontLeftwheel.translateZ(-17.5);\n    \n    // part 4\n    const frontRightwheel = createWheel(0xFFC0CB);\n    frontWheelAttacher.add(frontRightwheel)\n    frontRightwheel.translateY(-3);\n    frontRightwheel.translateZ(17.5);\n\n    \n    // Back wheel part\n    // part 5\n    const backWheelAttacher = createWheelAttacher(0x333333);\n    backWheelAttacher.translateX(-18);\n    backWheelAttacher.translateY(-3);\n\n    // part 6\n    const backLeftwheel = createWheel(0xFFC0CB);\n    backWheelAttacher.add(backLeftwheel);\n    backLeftwheel.translateY(-3);\n    backLeftwheel.translateZ(-17.5);\n\n    // part 7\n    const backRightwheel = createWheel(0xFFC0CB);\n    backWheelAttacher.add(backRightwheel);\n    backRightwheel.translateY(-3);\n    backRightwheel.translateZ(17.5);\n    \n\n    const allWheelAttachers = new THREE.Object3D();\n    allWheelAttachers.add(frontWheelAttacher, backWheelAttacher);\n    mainBox.add(allWheelAttachers);\n\n\n    // part 8\n    const carFrontTexture = getCarFrontBackTexture(mainBox);\n\n    // part 9\n    const carBackTexture = getCarFrontBackTexture(mainBox);\n\n    // part 10\n    const carLeftSideTexture = getCarSideTexture(mainBox);\n\n    // part 11\n    const carRightSideTexture = getCarSideTexture(mainBox);\n\n    // Putting all textures into cabin\n    const cabin = createCabin(carFrontTexture, carBackTexture, carLeftSideTexture, carRightSideTexture);\n    mainBox.add(cabin);\n    cabin.translateX(-6);\n    cabin.translateY(13.5);\n\n\n    // Eye part\n    // part 12\n    const leftHeadEye = headEye(0x000000);\n    leftHeadEye.translateX(30);\n    leftHeadEye.translateY(3);\n    leftHeadEye.translateZ(-10);\n    leftHeadEye.rotateY(degreeToRadian(90));\n\n    // part 13\n    const rightHeadEye = headEye(0x000000);\n    rightHeadEye.translateX(30);\n    rightHeadEye.translateY(3);\n    rightHeadEye.translateZ(10);\n    rightHeadEye.rotateY(degreeToRadian(90));\n    \n    const eyes = new THREE.Object3D();\n    eyes.add(leftHeadEye, rightHeadEye);\n    mainBox.add(eyes);\n\n    \n    // Nose\n    // part 14\n    const nose = createNose(0xf70707);\n    nose.translateX(30);\n    nose.rotateZ(degreeToRadian(-90));\n    mainBox.add(nose);\n\n\n    // Back exhaust part\n    // part 15\n    const leftExhaust = createExhaust(0x968b8b);\n    leftExhaust.translateX(-32);\n    leftExhaust.translateY(-5);\n    leftExhaust.translateZ(-3);\n    leftExhaust.rotateZ(degreeToRadian(90));\n\n    // part 16\n    const rightExhaust = createExhaust(0x968b8b);\n    rightExhaust.translateX(-32);\n    rightExhaust.translateY(-5);\n    rightExhaust.translateZ(3);\n    rightExhaust.rotateZ(degreeToRadian(90));\n\n    // Putting all exhaust into exhaust group\n    const exhausts = new THREE.Object3D();\n    exhausts.add(leftExhaust, rightExhaust);\n    mainBox.add(exhausts);\n\n    return mainBox\n}\n\nfunction createExhaust(color) {\n    const geometry = new THREE.CylinderGeometry( 1.3, 1.3, 4, 32 );\n    const material = new THREE.MeshBasicMaterial( {color: color} );\n    const cylinder = new THREE.Mesh( geometry, material );\n    return cylinder\n}\n\nfunction createNose(color) {\n    const geometry = new THREE.ConeGeometry( 5, 10, 32 );\n    const material = new THREE.MeshBasicMaterial( {color: color} );\n    const cone = new THREE.Mesh( geometry, material );\n    return cone;\n}\n\nfunction headEye(color) {\n    var geometry = new THREE.RingGeometry(1, 3.5, 32);\n    var material = new THREE.MeshPhongMaterial({color: 0x000000});\n    const blackEye = new THREE.Mesh(geometry, material);\n\n    geometry = new THREE.RingGeometry(0, 1, 32);\n    material = new THREE.MeshPhongMaterial({color: 0xffffff});\n    const whiteEye = new THREE.Mesh(geometry, material);\n\n    blackEye.add(whiteEye)\n\n    return blackEye;\n}\n\nfunction getCarSideTexture(mainBox) {\n    const canvas = document.createElement(\"canvas\");\n    canvas.width = 128;\n    canvas.height = 32;\n    const context = canvas.getContext(\"2d\");\n\n    if (context != null) {\n        context.fillStyle = \"#ffffff\";\n        context.fillRect(mainBox.position.x, mainBox.position.y, 128, 32);\n\n        context.fillStyle = \"#666666\";\n        context.fillRect(mainBox.position.x + 10, mainBox.position.y + 5, 38, 24);\n        context.fillRect(mainBox.position.x + 58, mainBox.position.y + 5, 60, 24);\n    }\n    return new THREE.CanvasTexture(canvas);\n}\n\nfunction getCarFrontBackTexture(mainBox) {\n    const canvas = document.createElement(\"canvas\");\n    canvas.width = 64;\n    canvas.height = 32;\n    const context = canvas.getContext(\"2d\");\n\n    if (context != null) {\n        context.fillStyle = \"#ffffff\";\n        context.fillRect(mainBox.position.x, mainBox.position.y, 64, 32);\n\n        context.fillStyle = \"#666666\";\n        context.fillRect(mainBox.position.x + 8, mainBox.position.y + 5, 48, 24);\n    }\n    return new THREE.CanvasTexture(canvas);\n}\n\nfunction createCabin(carFrontTexture, \n    carBackTexture, \n    carRightSideTexture, \n    carLeftSideTexture) {\n    const cabin = new THREE.Mesh(new THREE.BoxBufferGeometry(33, 12, 24), [\n        new THREE.MeshLambertMaterial({map: carFrontTexture}),\n        new THREE.MeshLambertMaterial({map: carBackTexture}),\n        new THREE.MeshLambertMaterial({ color: 0xffffff }), // top\n        new THREE.MeshLambertMaterial({ color: 0xffffff }), // bottom\n        new THREE.MeshLambertMaterial({ map: carRightSideTexture }),\n        new THREE.MeshLambertMaterial({ map: carLeftSideTexture }),\n    ]);\n    return cabin\n}\n\nfunction createMainBox(color) {\n    const main = new THREE.Mesh(\n        new THREE.BoxBufferGeometry(60, 15, 30),\n        new THREE.MeshPhongMaterial({ color: color, flatShading: true})\n    );\n    return main\n}\n\nfunction createWheel(color) {\n    // const geometry: THREE.CircleGeometry = new THREE.CircleGeometry(2, 32);\n    const geometry = new THREE.TorusGeometry( 5, 3, 20, 50 );\n    const material = new THREE.MeshPhongMaterial({ color: 0xFFC0CB});\n    const wheel = new THREE.Mesh(geometry, material);\n    return wheel;\n}\n\nfunction createWheelAttacher(color) {\n    const geometry = new THREE.BoxBufferGeometry(12, 12, 33);\n    const material = new THREE.MeshPhongMaterial({ color: color});\n    const wheelAttacher = new THREE.Mesh(geometry, material);\n    return wheelAttacher;\n}\n\nfunction degreeToRadian(degree) {\n    return degree * Math.PI / 180;\n}"]},"metadata":{},"sourceType":"module"}