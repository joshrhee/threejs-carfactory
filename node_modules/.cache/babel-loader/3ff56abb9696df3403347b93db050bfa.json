{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/sangjunerhee/Desktop/Git/Threejs-CarFactory/src/components/SantaCar.jsx\",\n    _s = $RefreshSig$();\n\nimport * as THREE from 'three';\nimport { useLoader, useFrame } from 'react-three-fiber';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'; // Hierarchy:\n//                                                  Scene(root)\n//                                                       |                        \n//                                                  mainBox(mesh)\n//                 /                                     |                                             \\                    .... nose, back exhaust\n//          cabin(mesh)                            wheelAttachers(Object3D)                            eyes(Object3D)\n//             |                                    /                \\                                    /       \\\n//   4 textures(canvas Texture)      frontAttacher(mesh)           backAttacher(mesh)              leftEeye(mesh)    rightEye(mesh)\n//                                   /           \\                   /          \\\n//                        leftWheel(mesh)    rightWheel(mesh)  leftWheel(mesh)   rightWheel(mesh)\n// left is + right is -\n// above is + down is -\n// far is + near is -\n\nconst SantaCar = props => {\n  _s();\n\n  function creatingWholeCar() {\n    // mainBox\n    // part 1\n    const mainBox = createMainBox(0xf3f709); //60 15 30\n    // Front wheel part\n    // part 2\n\n    const frontWheelAttacher = createWheelAttacher(0x333333); // 12 12 33\n\n    frontWheelAttacher.translateX(18);\n    frontWheelAttacher.translateY(-3); // part 3\n\n    const frontLeftwheel = createWheel(0xFFC0CB);\n    frontWheelAttacher.add(frontLeftwheel);\n    frontLeftwheel.translateY(-3);\n    frontLeftwheel.translateZ(-17.5); // part 4\n\n    const frontRightwheel = createWheel(0xFFC0CB);\n    frontWheelAttacher.add(frontRightwheel);\n    frontRightwheel.translateY(-3);\n    frontRightwheel.translateZ(17.5); // Back wheel part\n    // part 5\n\n    const backWheelAttacher = createWheelAttacher(0x333333);\n    backWheelAttacher.translateX(-18);\n    backWheelAttacher.translateY(-3); // part 6\n\n    const backLeftwheel = createWheel(0xFFC0CB);\n    backWheelAttacher.add(backLeftwheel);\n    backLeftwheel.translateY(-3);\n    backLeftwheel.translateZ(-17.5); // part 7\n\n    const backRightwheel = createWheel(0xFFC0CB);\n    backWheelAttacher.add(backRightwheel);\n    backRightwheel.translateY(-3);\n    backRightwheel.translateZ(17.5);\n    const allWheelAttachers = new THREE.Object3D();\n    allWheelAttachers.add(frontWheelAttacher, backWheelAttacher);\n    mainBox.add(allWheelAttachers); // part 8\n\n    const carFrontTexture = getCarFrontBackTexture(mainBox); // part 9\n\n    const carBackTexture = getCarFrontBackTexture(mainBox); // part 10\n\n    const carLeftSideTexture = getCarSideTexture(mainBox); // part 11\n\n    const carRightSideTexture = getCarSideTexture(mainBox); // Putting all textures into cabin\n\n    const cabin = createCabin(carFrontTexture, carBackTexture, carLeftSideTexture, carRightSideTexture);\n    mainBox.add(cabin);\n    cabin.translateX(-6);\n    cabin.translateY(13.5); // Eye part\n    // part 12\n\n    const leftHeadEye = headEye(0x000000);\n    leftHeadEye.translateX(30);\n    leftHeadEye.translateY(3);\n    leftHeadEye.translateZ(-10);\n    leftHeadEye.rotateY(degreeToRadian(90)); // part 13\n\n    const rightHeadEye = headEye(0x000000);\n    rightHeadEye.translateX(30);\n    rightHeadEye.translateY(3);\n    rightHeadEye.translateZ(10);\n    rightHeadEye.rotateY(degreeToRadian(90));\n    const eyes = new THREE.Object3D();\n    eyes.add(leftHeadEye, rightHeadEye);\n    mainBox.add(eyes); // Nose\n    // part 14\n\n    const nose = createNose(0xf70707);\n    nose.translateX(30);\n    nose.rotateZ(degreeToRadian(-90));\n    mainBox.add(nose); // Back exhaust part\n    // part 15\n\n    const leftExhaust = createExhaust(0x968b8b);\n    leftExhaust.translateX(-32);\n    leftExhaust.translateY(-5);\n    leftExhaust.translateZ(-3);\n    leftExhaust.rotateZ(degreeToRadian(90)); // part 16\n\n    const rightExhaust = createExhaust(0x968b8b);\n    rightExhaust.translateX(-32);\n    rightExhaust.translateY(-5);\n    rightExhaust.translateZ(3);\n    rightExhaust.rotateZ(degreeToRadian(90)); // Putting all exhaust into exhaust group\n\n    const exhausts = new THREE.Object3D();\n    exhausts.add(leftExhaust, rightExhaust);\n    mainBox.add(exhausts);\n    return mainBox;\n  }\n\n  function createExhaust(color) {\n    const geometry = new THREE.CylinderGeometry(1.3, 1.3, 4, 32);\n    const material = new THREE.MeshBasicMaterial({\n      color: color\n    });\n    const cylinder = new THREE.Mesh(geometry, material);\n    return cylinder;\n  }\n\n  function createNose(color) {\n    const geometry = new THREE.ConeGeometry(5, 10, 32);\n    const material = new THREE.MeshBasicMaterial({\n      color: color\n    });\n    const cone = new THREE.Mesh(geometry, material);\n    return cone;\n  }\n\n  function headEye(color) {\n    var geometry = new THREE.RingGeometry(1, 3.5, 32);\n    var material = new THREE.MeshPhongMaterial({\n      color: 0x000000\n    });\n    const blackEye = new THREE.Mesh(geometry, material);\n    geometry = new THREE.RingGeometry(0, 1, 32);\n    material = new THREE.MeshPhongMaterial({\n      color: 0xffffff\n    });\n    const whiteEye = new THREE.Mesh(geometry, material);\n    blackEye.add(whiteEye);\n    return blackEye;\n  }\n\n  function getCarSideTexture(mainBox) {\n    const canvas = document.createElement(\"canvas\");\n    canvas.width = 128;\n    canvas.height = 32;\n    const context = canvas.getContext(\"2d\");\n\n    if (context != null) {\n      context.fillStyle = \"#ffffff\";\n      context.fillRect(mainBox.position.x, mainBox.position.y, 128, 32);\n      context.fillStyle = \"#666666\";\n      context.fillRect(mainBox.position.x + 10, mainBox.position.y + 5, 38, 24);\n      context.fillRect(mainBox.position.x + 58, mainBox.position.y + 5, 60, 24);\n    }\n\n    return new THREE.CanvasTexture(canvas);\n  }\n\n  function getCarFrontBackTexture(mainBox) {\n    const canvas = document.createElement(\"canvas\");\n    canvas.width = 64;\n    canvas.height = 32;\n    const context = canvas.getContext(\"2d\");\n\n    if (context != null) {\n      context.fillStyle = \"#ffffff\";\n      context.fillRect(mainBox.position.x, mainBox.position.y, 64, 32);\n      context.fillStyle = \"#666666\";\n      context.fillRect(mainBox.position.x + 8, mainBox.position.y + 5, 48, 24);\n    }\n\n    return new THREE.CanvasTexture(canvas);\n  }\n\n  function createCabin(carFrontTexture, carBackTexture, carRightSideTexture, carLeftSideTexture) {\n    const cabin = new THREE.Mesh(new THREE.BoxBufferGeometry(33, 12, 24), [new THREE.MeshLambertMaterial({\n      map: carFrontTexture\n    }), new THREE.MeshLambertMaterial({\n      map: carBackTexture\n    }), new THREE.MeshLambertMaterial({\n      color: 0xffffff\n    }), // top\n    new THREE.MeshLambertMaterial({\n      color: 0xffffff\n    }), // bottom\n    new THREE.MeshLambertMaterial({\n      map: carRightSideTexture\n    }), new THREE.MeshLambertMaterial({\n      map: carLeftSideTexture\n    })]);\n    return cabin;\n  }\n\n  function createMainBox(color) {\n    const main = new THREE.Mesh(new THREE.BoxBufferGeometry(60, 15, 30), new THREE.MeshPhongMaterial({\n      color: color,\n      flatShading: true\n    }));\n    return main;\n  }\n\n  function createWheel(color) {\n    // const geometry: THREE.CircleGeometry = new THREE.CircleGeometry(2, 32);\n    const geometry = new THREE.TorusGeometry(5, 3, 20, 50);\n    const material = new THREE.MeshPhongMaterial({\n      color: 0xFFC0CB\n    });\n    const wheel = new THREE.Mesh(geometry, material);\n    return wheel;\n  }\n\n  function createWheelAttacher(color) {\n    const geometry = new THREE.BoxBufferGeometry(12, 12, 33);\n    const material = new THREE.MeshPhongMaterial({\n      color: color\n    });\n    const wheelAttacher = new THREE.Mesh(geometry, material);\n    return wheelAttacher;\n  }\n\n  function degreeToRadian(degree) {\n    return degree * Math.PI / 180;\n  }\n\n  const model = creatingWholeCar();\n  let mixer;\n\n  if (model.animations.length > 0) {\n    mixer = new THREE.AnimationMixer(model.scene);\n    model.animations.forEach(clip => {\n      const action = mixer.clipAction(clip);\n      action.play();\n    });\n  }\n\n  console.log(\"model\", model);\n  useFrame((scene, delta) => {\n    var _mixer;\n\n    (_mixer = mixer) === null || _mixer === void 0 ? void 0 : _mixer.update(delta);\n  });\n  model.scene.traverse(child => {\n    if (child.isMesh) {\n      child.castShadow = true;\n      child.receiveShadow = true;\n      child.material.side = THREE.FrontSide;\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"primitive\", {\n    object: model.scene,\n    scale: props.scale,\n    position: props.position\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 272,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SantaCar, \"xC67171NPRcCAzsbrenetil66NI=\", false, function () {\n  return [useFrame];\n});\n\n_c = SantaCar;\nexport default SantaCar;\n\nvar _c;\n\n$RefreshReg$(_c, \"SantaCar\");","map":{"version":3,"sources":["/Users/sangjunerhee/Desktop/Git/Threejs-CarFactory/src/components/SantaCar.jsx"],"names":["THREE","useLoader","useFrame","GLTFLoader","SantaCar","props","creatingWholeCar","mainBox","createMainBox","frontWheelAttacher","createWheelAttacher","translateX","translateY","frontLeftwheel","createWheel","add","translateZ","frontRightwheel","backWheelAttacher","backLeftwheel","backRightwheel","allWheelAttachers","Object3D","carFrontTexture","getCarFrontBackTexture","carBackTexture","carLeftSideTexture","getCarSideTexture","carRightSideTexture","cabin","createCabin","leftHeadEye","headEye","rotateY","degreeToRadian","rightHeadEye","eyes","nose","createNose","rotateZ","leftExhaust","createExhaust","rightExhaust","exhausts","color","geometry","CylinderGeometry","material","MeshBasicMaterial","cylinder","Mesh","ConeGeometry","cone","RingGeometry","MeshPhongMaterial","blackEye","whiteEye","canvas","document","createElement","width","height","context","getContext","fillStyle","fillRect","position","x","y","CanvasTexture","BoxBufferGeometry","MeshLambertMaterial","map","main","flatShading","TorusGeometry","wheel","wheelAttacher","degree","Math","PI","model","mixer","animations","length","AnimationMixer","scene","forEach","clip","action","clipAction","play","console","log","delta","update","traverse","child","isMesh","castShadow","receiveShadow","side","FrontSide","scale"],"mappings":"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","sourcesContent":["import * as THREE from 'three';\nimport { useLoader, useFrame } from 'react-three-fiber';\nimport {\n    GLTFLoader\n} from 'three/examples/jsm/loaders/GLTFLoader';\n\n// Hierarchy:\n//                                                  Scene(root)\n//                                                       |                        \n//                                                  mainBox(mesh)\n//                 /                                     |                                             \\                    .... nose, back exhaust\n//          cabin(mesh)                            wheelAttachers(Object3D)                            eyes(Object3D)\n//             |                                    /                \\                                    /       \\\n//   4 textures(canvas Texture)      frontAttacher(mesh)           backAttacher(mesh)              leftEeye(mesh)    rightEye(mesh)\n//                                   /           \\                   /          \\\n//                        leftWheel(mesh)    rightWheel(mesh)  leftWheel(mesh)   rightWheel(mesh)\n\n\n\n// left is + right is -\n// above is + down is -\n// far is + near is -\nconst SantaCar = props => {\n    function creatingWholeCar() {\n        // mainBox\n        // part 1\n        const mainBox = createMainBox(0xf3f709) //60 15 30\n    \n    \n        // Front wheel part\n        // part 2\n        const frontWheelAttacher = createWheelAttacher(0x333333); // 12 12 33\n        frontWheelAttacher.translateX(18);\n        frontWheelAttacher.translateY(-3)\n        \n        // part 3\n        const frontLeftwheel = createWheel(0xFFC0CB);\n        frontWheelAttacher.add(frontLeftwheel)\n        frontLeftwheel.translateY(-3);\n        frontLeftwheel.translateZ(-17.5);\n        \n        // part 4\n        const frontRightwheel = createWheel(0xFFC0CB);\n        frontWheelAttacher.add(frontRightwheel)\n        frontRightwheel.translateY(-3);\n        frontRightwheel.translateZ(17.5);\n    \n        \n        // Back wheel part\n        // part 5\n        const backWheelAttacher = createWheelAttacher(0x333333);\n        backWheelAttacher.translateX(-18);\n        backWheelAttacher.translateY(-3);\n    \n        // part 6\n        const backLeftwheel = createWheel(0xFFC0CB);\n        backWheelAttacher.add(backLeftwheel);\n        backLeftwheel.translateY(-3);\n        backLeftwheel.translateZ(-17.5);\n    \n        // part 7\n        const backRightwheel = createWheel(0xFFC0CB);\n        backWheelAttacher.add(backRightwheel);\n        backRightwheel.translateY(-3);\n        backRightwheel.translateZ(17.5);\n        \n    \n        const allWheelAttachers = new THREE.Object3D();\n        allWheelAttachers.add(frontWheelAttacher, backWheelAttacher);\n        mainBox.add(allWheelAttachers);\n    \n    \n        // part 8\n        const carFrontTexture = getCarFrontBackTexture(mainBox);\n    \n        // part 9\n        const carBackTexture = getCarFrontBackTexture(mainBox);\n    \n        // part 10\n        const carLeftSideTexture = getCarSideTexture(mainBox);\n    \n        // part 11\n        const carRightSideTexture = getCarSideTexture(mainBox);\n    \n        // Putting all textures into cabin\n        const cabin = createCabin(carFrontTexture, carBackTexture, carLeftSideTexture, carRightSideTexture);\n        mainBox.add(cabin);\n        cabin.translateX(-6);\n        cabin.translateY(13.5);\n    \n    \n        // Eye part\n        // part 12\n        const leftHeadEye = headEye(0x000000);\n        leftHeadEye.translateX(30);\n        leftHeadEye.translateY(3);\n        leftHeadEye.translateZ(-10);\n        leftHeadEye.rotateY(degreeToRadian(90));\n    \n        // part 13\n        const rightHeadEye = headEye(0x000000);\n        rightHeadEye.translateX(30);\n        rightHeadEye.translateY(3);\n        rightHeadEye.translateZ(10);\n        rightHeadEye.rotateY(degreeToRadian(90));\n        \n        const eyes = new THREE.Object3D();\n        eyes.add(leftHeadEye, rightHeadEye);\n        mainBox.add(eyes);\n    \n        \n        // Nose\n        // part 14\n        const nose = createNose(0xf70707);\n        nose.translateX(30);\n        nose.rotateZ(degreeToRadian(-90));\n        mainBox.add(nose);\n    \n    \n        // Back exhaust part\n        // part 15\n        const leftExhaust = createExhaust(0x968b8b);\n        leftExhaust.translateX(-32);\n        leftExhaust.translateY(-5);\n        leftExhaust.translateZ(-3);\n        leftExhaust.rotateZ(degreeToRadian(90));\n    \n        // part 16\n        const rightExhaust = createExhaust(0x968b8b);\n        rightExhaust.translateX(-32);\n        rightExhaust.translateY(-5);\n        rightExhaust.translateZ(3);\n        rightExhaust.rotateZ(degreeToRadian(90));\n    \n        // Putting all exhaust into exhaust group\n        const exhausts = new THREE.Object3D();\n        exhausts.add(leftExhaust, rightExhaust);\n        mainBox.add(exhausts);\n    \n        return mainBox\n    }\n    \n    function createExhaust(color) {\n        const geometry = new THREE.CylinderGeometry( 1.3, 1.3, 4, 32 );\n        const material = new THREE.MeshBasicMaterial( {color: color} );\n        const cylinder = new THREE.Mesh( geometry, material );\n        return cylinder\n    }\n    \n    function createNose(color) {\n        const geometry = new THREE.ConeGeometry( 5, 10, 32 );\n        const material = new THREE.MeshBasicMaterial( {color: color} );\n        const cone = new THREE.Mesh( geometry, material );\n        return cone;\n    }\n    \n    function headEye(color) {\n        var geometry = new THREE.RingGeometry(1, 3.5, 32);\n        var material = new THREE.MeshPhongMaterial({color: 0x000000});\n        const blackEye = new THREE.Mesh(geometry, material);\n    \n        geometry = new THREE.RingGeometry(0, 1, 32);\n        material = new THREE.MeshPhongMaterial({color: 0xffffff});\n        const whiteEye = new THREE.Mesh(geometry, material);\n    \n        blackEye.add(whiteEye)\n    \n        return blackEye;\n    }\n    \n    function getCarSideTexture(mainBox) {\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = 128;\n        canvas.height = 32;\n        const context = canvas.getContext(\"2d\");\n    \n        if (context != null) {\n            context.fillStyle = \"#ffffff\";\n            context.fillRect(mainBox.position.x, mainBox.position.y, 128, 32);\n    \n            context.fillStyle = \"#666666\";\n            context.fillRect(mainBox.position.x + 10, mainBox.position.y + 5, 38, 24);\n            context.fillRect(mainBox.position.x + 58, mainBox.position.y + 5, 60, 24);\n        }\n        return new THREE.CanvasTexture(canvas);\n    }\n    \n    function getCarFrontBackTexture(mainBox) {\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = 64;\n        canvas.height = 32;\n        const context = canvas.getContext(\"2d\");\n    \n        if (context != null) {\n            context.fillStyle = \"#ffffff\";\n            context.fillRect(mainBox.position.x, mainBox.position.y, 64, 32);\n    \n            context.fillStyle = \"#666666\";\n            context.fillRect(mainBox.position.x + 8, mainBox.position.y + 5, 48, 24);\n        }\n        return new THREE.CanvasTexture(canvas);\n    }\n    \n    function createCabin(carFrontTexture, \n        carBackTexture, \n        carRightSideTexture, \n        carLeftSideTexture) {\n        const cabin = new THREE.Mesh(new THREE.BoxBufferGeometry(33, 12, 24), [\n            new THREE.MeshLambertMaterial({map: carFrontTexture}),\n            new THREE.MeshLambertMaterial({map: carBackTexture}),\n            new THREE.MeshLambertMaterial({ color: 0xffffff }), // top\n            new THREE.MeshLambertMaterial({ color: 0xffffff }), // bottom\n            new THREE.MeshLambertMaterial({ map: carRightSideTexture }),\n            new THREE.MeshLambertMaterial({ map: carLeftSideTexture }),\n        ]);\n        return cabin\n    }\n    \n    function createMainBox(color) {\n        const main = new THREE.Mesh(\n            new THREE.BoxBufferGeometry(60, 15, 30),\n            new THREE.MeshPhongMaterial({ color: color, flatShading: true})\n        );\n        return main\n    }\n    \n    function createWheel(color) {\n        // const geometry: THREE.CircleGeometry = new THREE.CircleGeometry(2, 32);\n        const geometry = new THREE.TorusGeometry( 5, 3, 20, 50 );\n        const material = new THREE.MeshPhongMaterial({ color: 0xFFC0CB});\n        const wheel = new THREE.Mesh(geometry, material);\n        return wheel;\n    }\n    \n    function createWheelAttacher(color) {\n        const geometry = new THREE.BoxBufferGeometry(12, 12, 33);\n        const material = new THREE.MeshPhongMaterial({ color: color});\n        const wheelAttacher = new THREE.Mesh(geometry, material);\n        return wheelAttacher;\n    }\n    \n    function degreeToRadian(degree) {\n        return degree * Math.PI / 180;\n    }\n\n    const model = creatingWholeCar();\n\n    let mixer\n    if (model.animations.length > 0) {\n        mixer = new THREE.AnimationMixer(model.scene)\n        model.animations.forEach(clip => {\n            const action = mixer.clipAction(clip)\n            action.play()\n        })\n    }\n\n    console.log(\"model\", model)\n\n    useFrame((scene,delta) => {\n        mixer?.update(delta)\n    })\n\n    model.scene.traverse(child => {\n        if (child.isMesh) {\n            child.castShadow = true\n            child.receiveShadow = true\n            child.material.side = THREE.FrontSide\n        }\n    })\n\n    return (\n        <primitive\n            object={model.scene}\n            scale={props.scale}\n            position={props.position}\n        />\n    )\n}\n\n\n\nexport default SantaCar;"]},"metadata":{},"sourceType":"module"}